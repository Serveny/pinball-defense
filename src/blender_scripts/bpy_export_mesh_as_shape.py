import os
from pathlib import Path
import bpy
from bpy.types import MeshPolygon, MeshVertex, MeshEdge
from mathutils import Vector, Quaternion, Euler
from math import sqrt

dir_name = Path(__file__).parent.parent
file_name = os.path.join(dir_name, "../../src/game/colliders.rs")

print("\n-------------------------------------\n")

mesh = bpy.context.active_object
if mesh.type != "MESH":
    raise Exception("Selected object is no mesh")
faces: list[MeshPolygon] = mesh.data.polygons
vertices: list[MeshVertex] = mesh.data.vertices
edges: list[MeshEdge] = mesh.data.edges

with open(file_name, "w") as file:
    file.write(
        """// File generated by blender script
use crate::prelude::*;

#[allow(clippy::approx_constant)]
pub fn create_collider() -> Collider {
    let faces = vec![
    """
    )
    for face in faces:
        norm: Vector = face.normal
        quat: Quaternion = Vector((norm.x, norm.z, -norm.y)).to_track_quat("Z", "Y")
        pos = face.center
        file.write("        (")
        file.write(f"Vec3::new({pos.x:f}, {pos.z:f}, {-pos.y:f}), ")
        file.write(f"Quat::from_xyzw({quat.x:f}, {quat.y:f}, {quat.z:f}, {quat.w:f}), ")
        verts: list[Vector] = [vertices[key].co for key in face.vertices]
        width = (verts[1] - verts[0]).length / 2
        height = (verts[1] - verts[2]).length / 2
        file.write(f"Collider::cuboid({width:f}, {height:f}, {0.0001:f})")
        file.write("),\n")
    file.write("    ];")
    file.write("    Collider::compound(faces)")
    file.write("}")
