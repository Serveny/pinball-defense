import os
from pathlib import Path
import bpy
from bpy.types import MeshPolygon, MeshVertex, MeshEdge
from mathutils import Vector, Quaternion, Euler
from math import sqrt

dir_name = Path(__file__).parent.parent
file_name = os.path.join(dir_name, "../../src/game/colliders.rs")
face_thickness = 0.002

print("\n-------------------------------------\n")

mesh = bpy.context.active_object
if mesh.type != "MESH":
    raise Exception("Selected object is no mesh")
faces: list[MeshPolygon] = mesh.data.polygons
vertices: list[MeshVertex] = mesh.data.vertices
edges: list[MeshEdge] = mesh.data.edges


def only_same_z(verts: list[Vector]) -> tuple[Vector, Vector]:
    a = verts[0]
    b = next(
        pos
        for i, pos in enumerate(verts)
        if i != 0 and round(pos.z, 4) == round(a.z, 4)
    )
    print((Vector((a.x, a.y)), Vector((b.x, b.y))))
    return (Vector((a.x, a.y)), Vector((b.x, b.y)))


with open(file_name, "w") as file:
    file.write(
        """// File generated by blender script
use crate::prelude::*;

#[allow(clippy::approx_constant, clippy::excessive_precision)]
pub fn create_collider() -> Collider {
    let faces = vec![
    """
    )
    for face in faces:
        file.write("        (")

        # Position
        pos = face.center.to_2d()
        norm = Vector((face.normal.x, face.normal.y))
        pos = pos - (norm * face_thickness)
        file.write(f"Vec2::new({pos.x:f}, {pos.y:f}), ")

        # Rotation
        verts: tuple[Vector, Vector] = only_same_z(
            [vertices[key].co for key in face.vertices]
        )
        dir_vec = verts[0] - verts[1]
        width_vec = (dir_vec).length / 2
        # norm: Vector = Vector((face.normal.x, face.normal.y))
        angle = dir_vec.angle_signed(Vector((1, 0)))
        file.write(f"{angle:f}, ")
        # quat: Quaternion = Vector((norm.x, norm.y, norm.z)).to_track_quat("Z", "Y")
        # file.write(f"Quat::from_xyzw({quat.x:f}, {quat.y:f}, {quat.z:f}, {quat.w:f}), ")

        # Size of face

        # print(f"{width=}, {height=}")
        file.write(f"Collider::cuboid({width_vec:f}, {face_thickness:f})")
        file.write("),\n")
    file.write("    ];")
    file.write("    Collider::compound(faces)")
    file.write("}")
